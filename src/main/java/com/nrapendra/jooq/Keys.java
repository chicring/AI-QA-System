/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq;


import com.nrapendra.jooq.tables.PermissionTb;
import com.nrapendra.jooq.tables.QuestionTagTb;
import com.nrapendra.jooq.tables.QuestionTb;
import com.nrapendra.jooq.tables.RolePermissionTb;
import com.nrapendra.jooq.tables.RoleTb;
import com.nrapendra.jooq.tables.TagTb;
import com.nrapendra.jooq.tables.UserRoleTb;
import com.nrapendra.jooq.tables.UserTb;
import com.nrapendra.jooq.tables.records.PermissionRecord;
import com.nrapendra.jooq.tables.records.QuestionRecord;
import com.nrapendra.jooq.tables.records.QuestionTagRecord;
import com.nrapendra.jooq.tables.records.RolePermissionRecord;
import com.nrapendra.jooq.tables.records.RoleRecord;
import com.nrapendra.jooq.tables.records.TagRecord;
import com.nrapendra.jooq.tables.records.UserRecord;
import com.nrapendra.jooq.tables.records.UserRoleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * ai_qa_system.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<QuestionRecord> KEY_QA_QUESTION_PRIMARY = Internal.createUniqueKey(QuestionTb.QA_QUESTION, DSL.name("KEY_qa_question_PRIMARY"), new TableField[] { QuestionTb.QA_QUESTION.ID }, true);
    public static final UniqueKey<QuestionTagRecord> KEY_QA_QUESTION_TAG_PRIMARY = Internal.createUniqueKey(QuestionTagTb.QA_QUESTION_TAG, DSL.name("KEY_qa_question_tag_PRIMARY"), new TableField[] { QuestionTagTb.QA_QUESTION_TAG.QUESTION_TAG_ID }, true);
    public static final UniqueKey<QuestionTagRecord> KEY_QA_QUESTION_TAG_UK_QUESTION_TAG = Internal.createUniqueKey(QuestionTagTb.QA_QUESTION_TAG, DSL.name("KEY_qa_question_tag_uk_question_tag"), new TableField[] { QuestionTagTb.QA_QUESTION_TAG.QUESTION_ID, QuestionTagTb.QA_QUESTION_TAG.TAG_ID }, true);
    public static final UniqueKey<TagRecord> KEY_QA_TAG_PRIMARY = Internal.createUniqueKey(TagTb.QA_TAG, DSL.name("KEY_qa_tag_PRIMARY"), new TableField[] { TagTb.QA_TAG.ID }, true);
    public static final UniqueKey<TagRecord> KEY_QA_TAG_UK_TAG_NAME = Internal.createUniqueKey(TagTb.QA_TAG, DSL.name("KEY_qa_tag_uk_tag_name"), new TableField[] { TagTb.QA_TAG.TAG_NAME }, true);
    public static final UniqueKey<PermissionRecord> KEY_SYS_PERMISSION_PRIMARY = Internal.createUniqueKey(PermissionTb.SYS_PERMISSION, DSL.name("KEY_sys_permission_PRIMARY"), new TableField[] { PermissionTb.SYS_PERMISSION.ID }, true);
    public static final UniqueKey<RoleRecord> KEY_SYS_ROLE_PRIMARY = Internal.createUniqueKey(RoleTb.SYS_ROLE, DSL.name("KEY_sys_role_PRIMARY"), new TableField[] { RoleTb.SYS_ROLE.ID }, true);
    public static final UniqueKey<RolePermissionRecord> KEY_SYS_ROLE_PERMISSION_PRIMARY = Internal.createUniqueKey(RolePermissionTb.SYS_ROLE_PERMISSION, DSL.name("KEY_sys_role_permission_PRIMARY"), new TableField[] { RolePermissionTb.SYS_ROLE_PERMISSION.ID }, true);
    public static final UniqueKey<UserRecord> KEY_SYS_USER_PRIMARY = Internal.createUniqueKey(UserTb.SYS_USER, DSL.name("KEY_sys_user_PRIMARY"), new TableField[] { UserTb.SYS_USER.ID }, true);
    public static final UniqueKey<UserRoleRecord> KEY_SYS_USER_ROLE_PRIMARY = Internal.createUniqueKey(UserRoleTb.SYS_USER_ROLE, DSL.name("KEY_sys_user_role_PRIMARY"), new TableField[] { UserRoleTb.SYS_USER_ROLE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<RolePermissionRecord, PermissionRecord> SYS_ROLE_PERMISSION_SYS_PERMISSION_FK = Internal.createForeignKey(RolePermissionTb.SYS_ROLE_PERMISSION, DSL.name("sys_role_permission_sys_permission_FK"), new TableField[] { RolePermissionTb.SYS_ROLE_PERMISSION.PERMISSION_ID }, Keys.KEY_SYS_PERMISSION_PRIMARY, new TableField[] { PermissionTb.SYS_PERMISSION.ID }, true);
    public static final ForeignKey<RolePermissionRecord, RoleRecord> SYS_ROLE_PERMISSION_SYS_ROLE_FK = Internal.createForeignKey(RolePermissionTb.SYS_ROLE_PERMISSION, DSL.name("sys_role_permission_sys_role_FK"), new TableField[] { RolePermissionTb.SYS_ROLE_PERMISSION.ROLE_ID }, Keys.KEY_SYS_ROLE_PRIMARY, new TableField[] { RoleTb.SYS_ROLE.ID }, true);
}
