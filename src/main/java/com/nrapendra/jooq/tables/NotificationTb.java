/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.NotificationRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationTb extends TableImpl<NotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.sys_notification</code>
     */
    public static final NotificationTb SYS_NOTIFICATION = new NotificationTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * The column <code>ai_qa_system.sys_notification.id</code>.
     */
    public final TableField<NotificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ai_qa_system.sys_notification.title</code>. 通知标题
     */
    public final TableField<NotificationRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "通知标题");

    /**
     * The column <code>ai_qa_system.sys_notification.content</code>.
     */
    public final TableField<NotificationRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>ai_qa_system.sys_notification.type</code>.
     */
    public final TableField<NotificationRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ai_qa_system.sys_notification.status</code>. 状态 1:未读
     * 2:已读
     */
    public final TableField<NotificationRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "状态 1:未读 2:已读");

    /**
     * The column <code>ai_qa_system.sys_notification.is_deleted</code>. 是否删除 0:
     * 未删除 1: 已删除
     */
    public final TableField<NotificationRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "是否删除 0: 未删除 1: 已删除");

    /**
     * The column <code>ai_qa_system.sys_notification.username</code>. 创建者
     */
    public final TableField<NotificationRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "创建者");

    /**
     * The column <code>ai_qa_system.sys_notification.create_time</code>. 创建时间
     */
    public final TableField<NotificationRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    /**
     * The column <code>ai_qa_system.sys_notification.update_time</code>. 修改时间
     */
    public final TableField<NotificationRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "修改时间");

    private NotificationTb(Name alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationTb(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_notification</code> table
     * reference
     */
    public NotificationTb(String alias) {
        this(DSL.name(alias), SYS_NOTIFICATION);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_notification</code> table
     * reference
     */
    public NotificationTb(Name alias) {
        this(alias, SYS_NOTIFICATION);
    }

    /**
     * Create a <code>ai_qa_system.sys_notification</code> table reference
     */
    public NotificationTb() {
        this(DSL.name("sys_notification"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<NotificationRecord, Long> getIdentity() {
        return (Identity<NotificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.KEY_SYS_NOTIFICATION_PRIMARY;
    }

    @Override
    public NotificationTb as(String alias) {
        return new NotificationTb(DSL.name(alias), this);
    }

    @Override
    public NotificationTb as(Name alias) {
        return new NotificationTb(alias, this);
    }

    @Override
    public NotificationTb as(Table<?> alias) {
        return new NotificationTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTb rename(String name) {
        return new NotificationTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTb rename(Name name) {
        return new NotificationTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTb rename(Table<?> name) {
        return new NotificationTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTb where(Condition condition) {
        return new NotificationTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
