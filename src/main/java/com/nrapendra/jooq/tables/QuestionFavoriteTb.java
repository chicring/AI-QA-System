/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.QuestionFavoriteRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 题目收藏表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionFavoriteTb extends TableImpl<QuestionFavoriteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.qa_question_favorite</code>
     */
    public static final QuestionFavoriteTb QA_QUESTION_FAVORITE = new QuestionFavoriteTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionFavoriteRecord> getRecordType() {
        return QuestionFavoriteRecord.class;
    }

    /**
     * The column <code>ai_qa_system.qa_question_favorite.id</code>. 主键ID
     */
    public final TableField<QuestionFavoriteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>ai_qa_system.qa_question_favorite.username</code>. 用户名
     */
    public final TableField<QuestionFavoriteRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(36).nullable(false), this, "用户名");

    /**
     * The column <code>ai_qa_system.qa_question_favorite.question_id</code>.
     * 题目ID
     */
    public final TableField<QuestionFavoriteRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "题目ID");

    /**
     * The column <code>ai_qa_system.qa_question_favorite.create_time</code>.
     * 创建时间
     */
    public final TableField<QuestionFavoriteRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>ai_qa_system.qa_question_favorite.update_time</code>.
     * 修改时间
     */
    public final TableField<QuestionFavoriteRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>ai_qa_system.qa_question_favorite.is_deleted</code>.
     * 是否删除 0:未删除 1:已删除
     */
    public final TableField<QuestionFavoriteRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "是否删除 0:未删除 1:已删除");

    private QuestionFavoriteTb(Name alias, Table<QuestionFavoriteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QuestionFavoriteTb(Name alias, Table<QuestionFavoriteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("题目收藏表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_question_favorite</code> table
     * reference
     */
    public QuestionFavoriteTb(String alias) {
        this(DSL.name(alias), QA_QUESTION_FAVORITE);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_question_favorite</code> table
     * reference
     */
    public QuestionFavoriteTb(Name alias) {
        this(alias, QA_QUESTION_FAVORITE);
    }

    /**
     * Create a <code>ai_qa_system.qa_question_favorite</code> table reference
     */
    public QuestionFavoriteTb() {
        this(DSL.name("qa_question_favorite"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<QuestionFavoriteRecord, Long> getIdentity() {
        return (Identity<QuestionFavoriteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuestionFavoriteRecord> getPrimaryKey() {
        return Keys.KEY_QA_QUESTION_FAVORITE_PRIMARY;
    }

    @Override
    public QuestionFavoriteTb as(String alias) {
        return new QuestionFavoriteTb(DSL.name(alias), this);
    }

    @Override
    public QuestionFavoriteTb as(Name alias) {
        return new QuestionFavoriteTb(alias, this);
    }

    @Override
    public QuestionFavoriteTb as(Table<?> alias) {
        return new QuestionFavoriteTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionFavoriteTb rename(String name) {
        return new QuestionFavoriteTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionFavoriteTb rename(Name name) {
        return new QuestionFavoriteTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionFavoriteTb rename(Table<?> name) {
        return new QuestionFavoriteTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionFavoriteTb where(Condition condition) {
        return new QuestionFavoriteTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionFavoriteTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionFavoriteTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionFavoriteTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionFavoriteTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionFavoriteTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionFavoriteTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionFavoriteTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionFavoriteTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionFavoriteTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
