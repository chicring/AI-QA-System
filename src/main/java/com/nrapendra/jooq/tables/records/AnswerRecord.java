/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables.records;


import com.nrapendra.jooq.tables.AnswerTb;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;


/**
 * 题目答案表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerRecord extends UpdatableRecordImpl<AnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ai_qa_system.qa_answer.id</code>. 主键ID
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.id</code>. 主键ID
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.question_id</code>. 题目ID
     */
    public void setQuestionId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.question_id</code>. 题目ID
     */
    public Long getQuestionId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.question_answer</code>. 答案内容
     */
    public void setQuestionAnswer(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.question_answer</code>. 答案内容
     */
    public String getQuestionAnswer() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.extended_filed</code>. 额外内容
     */
    public void setExtendedFiled(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.extended_filed</code>. 额外内容
     */
    public String getExtendedFiled() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.answer_status</code>. 状态 1:正常
     * 0:禁用
     */
    public void setAnswerStatus(UByte value) {
        set(4, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.answer_status</code>. 状态 1:正常
     * 0:禁用
     */
    public UByte getAnswerStatus() {
        return (UByte) get(4);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.create_time</code>. 创建时间
     */
    public void setCreateTime(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.create_time</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.update_time</code>. 修改时间
     */
    public void setUpdateTime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.update_time</code>. 修改时间
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>ai_qa_system.qa_answer.creator</code>. 创建者
     */
    public void setCreator(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>ai_qa_system.qa_answer.creator</code>. 创建者
     */
    public String getCreator() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnswerRecord
     */
    public AnswerRecord() {
        super(AnswerTb.QA_ANSWER);
    }

    /**
     * Create a detached, initialised AnswerRecord
     */
    public AnswerRecord(Long id, Long questionId, String questionAnswer, String extendedFiled, UByte answerStatus, LocalDateTime createTime, LocalDateTime updateTime, String creator) {
        super(AnswerTb.QA_ANSWER);

        setId(id);
        setQuestionId(questionId);
        setQuestionAnswer(questionAnswer);
        setExtendedFiled(extendedFiled);
        setAnswerStatus(answerStatus);
        setCreateTime(createTime);
        setUpdateTime(updateTime);
        setCreator(creator);
        resetChangedOnNotNull();
    }
}
