/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.QuestionRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 题目表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionTb extends TableImpl<QuestionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.qa_question</code>
     */
    public static final QuestionTb QA_QUESTION = new QuestionTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>ai_qa_system.qa_question.id</code>. 主键ID
     */
    public final TableField<QuestionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>ai_qa_system.qa_question.question_id</code>. 题目ID
     */
    public final TableField<QuestionRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "题目ID");

    /**
     * The column <code>ai_qa_system.qa_question.question_title</code>. 题目标题
     */
    public final TableField<QuestionRecord, String> QUESTION_TITLE = createField(DSL.name("question_title"), SQLDataType.VARCHAR(255).nullable(false), this, "题目标题");

    /**
     * The column <code>ai_qa_system.qa_question.question_tips</code>. 题目提示
     */
    public final TableField<QuestionRecord, String> QUESTION_TIPS = createField(DSL.name("question_tips"), SQLDataType.VARCHAR(255), this, "题目提示");

    /**
     * The column <code>ai_qa_system.qa_question.difficulty</code>. 难度等级 1:简单
     * 2:中等 3:困难
     */
    public final TableField<QuestionRecord, UInteger> DIFFICULTY = createField(DSL.name("difficulty"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("2", SQLDataType.INTEGERUNSIGNED)), this, "难度等级 1:简单 2:中等 3:困难");

    /**
     * The column <code>ai_qa_system.qa_question.view_count</code>. 浏览次数
     */
    public final TableField<QuestionRecord, UInteger> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "浏览次数");

    /**
     * The column <code>ai_qa_system.qa_question.question_status</code>. 状态 1:正常
     * 0:禁用
     */
    public final TableField<QuestionRecord, UInteger> QUESTION_STATUS = createField(DSL.name("question_status"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGERUNSIGNED)), this, "状态 1:正常 0:禁用");

    /**
     * The column <code>ai_qa_system.qa_question.create_time</code>. 创建时间
     */
    public final TableField<QuestionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>ai_qa_system.qa_question.update_time</code>. 修改时间
     */
    public final TableField<QuestionRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>ai_qa_system.qa_question.creator</code>. 创建者
     */
    public final TableField<QuestionRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    /**
     * The column <code>ai_qa_system.qa_question.is_deleted</code>. 是否删除 0: 未删除
     * 1: 已删除
     */
    public final TableField<QuestionRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "是否删除 0: 未删除 1: 已删除");

    private QuestionTb(Name alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QuestionTb(Name alias, Table<QuestionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("题目表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_question</code> table reference
     */
    public QuestionTb(String alias) {
        this(DSL.name(alias), QA_QUESTION);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_question</code> table reference
     */
    public QuestionTb(Name alias) {
        this(alias, QA_QUESTION);
    }

    /**
     * Create a <code>ai_qa_system.qa_question</code> table reference
     */
    public QuestionTb() {
        this(DSL.name("qa_question"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<QuestionRecord, Long> getIdentity() {
        return (Identity<QuestionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.KEY_QA_QUESTION_PRIMARY;
    }

    @Override
    public QuestionTb as(String alias) {
        return new QuestionTb(DSL.name(alias), this);
    }

    @Override
    public QuestionTb as(Name alias) {
        return new QuestionTb(alias, this);
    }

    @Override
    public QuestionTb as(Table<?> alias) {
        return new QuestionTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTb rename(String name) {
        return new QuestionTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTb rename(Name name) {
        return new QuestionTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTb rename(Table<?> name) {
        return new QuestionTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTb where(Condition condition) {
        return new QuestionTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
