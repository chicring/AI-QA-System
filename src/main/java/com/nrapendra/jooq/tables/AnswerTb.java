/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.AnswerRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * 题目答案表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerTb extends TableImpl<AnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.qa_answer</code>
     */
    public static final AnswerTb QA_ANSWER = new AnswerTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerRecord> getRecordType() {
        return AnswerRecord.class;
    }

    /**
     * The column <code>ai_qa_system.qa_answer.id</code>. 主键ID
     */
    public final TableField<AnswerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>ai_qa_system.qa_answer.question_id</code>. 题目ID
     */
    public final TableField<AnswerRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "题目ID");

    /**
     * The column <code>ai_qa_system.qa_answer.question_answer</code>. 答案内容
     */
    public final TableField<AnswerRecord, String> QUESTION_ANSWER = createField(DSL.name("question_answer"), SQLDataType.CLOB.nullable(false), this, "答案内容");

    /**
     * The column <code>ai_qa_system.qa_answer.extended_filed</code>. 额外内容
     */
    public final TableField<AnswerRecord, String> EXTENDED_FILED = createField(DSL.name("extended_filed"), SQLDataType.VARCHAR(200), this, "额外内容");

    /**
     * The column <code>ai_qa_system.qa_answer.answer_status</code>. 状态 1:正常
     * 0:禁用
     */
    public final TableField<AnswerRecord, UByte> ANSWER_STATUS = createField(DSL.name("answer_status"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "状态 1:正常 0:禁用");

    /**
     * The column <code>ai_qa_system.qa_answer.create_time</code>. 创建时间
     */
    public final TableField<AnswerRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>ai_qa_system.qa_answer.update_time</code>. 修改时间
     */
    public final TableField<AnswerRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>ai_qa_system.qa_answer.creator</code>. 创建者
     */
    public final TableField<AnswerRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    private AnswerTb(Name alias, Table<AnswerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AnswerTb(Name alias, Table<AnswerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("题目答案表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_answer</code> table reference
     */
    public AnswerTb(String alias) {
        this(DSL.name(alias), QA_ANSWER);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_answer</code> table reference
     */
    public AnswerTb(Name alias) {
        this(alias, QA_ANSWER);
    }

    /**
     * Create a <code>ai_qa_system.qa_answer</code> table reference
     */
    public AnswerTb() {
        this(DSL.name("qa_answer"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<AnswerRecord, Long> getIdentity() {
        return (Identity<AnswerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnswerRecord> getPrimaryKey() {
        return Keys.KEY_QA_ANSWER_PRIMARY;
    }

    @Override
    public AnswerTb as(String alias) {
        return new AnswerTb(DSL.name(alias), this);
    }

    @Override
    public AnswerTb as(Name alias) {
        return new AnswerTb(alias, this);
    }

    @Override
    public AnswerTb as(Table<?> alias) {
        return new AnswerTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerTb rename(String name) {
        return new AnswerTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerTb rename(Name name) {
        return new AnswerTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerTb rename(Table<?> name) {
        return new AnswerTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnswerTb where(Condition condition) {
        return new AnswerTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnswerTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnswerTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnswerTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnswerTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnswerTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnswerTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnswerTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnswerTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnswerTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
