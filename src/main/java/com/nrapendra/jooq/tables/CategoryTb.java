/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.CategoryRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 题目分类表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryTb extends TableImpl<CategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.qa_category</code>
     */
    public static final CategoryTb QA_CATEGORY = new CategoryTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryRecord> getRecordType() {
        return CategoryRecord.class;
    }

    /**
     * The column <code>ai_qa_system.qa_category.id</code>. 主键ID
     */
    public final TableField<CategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>ai_qa_system.qa_category.category_name</code>. 分类名称
     */
    public final TableField<CategoryRecord, String> CATEGORY_NAME = createField(DSL.name("category_name"), SQLDataType.VARCHAR(50).nullable(false), this, "分类名称");

    /**
     * The column <code>ai_qa_system.qa_category.category_level</code>. 标签层级
     * 1:一级标签 2:二级标签
     */
    public final TableField<CategoryRecord, UInteger> CATEGORY_LEVEL = createField(DSL.name("category_level"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGERUNSIGNED)), this, "标签层级 1:一级标签 2:二级标签");

    /**
     * The column <code>ai_qa_system.qa_category.image_url</code>. 图标连接
     */
    public final TableField<CategoryRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(256), this, "图标连接");

    /**
     * The column <code>ai_qa_system.qa_category.description</code>. 描述
     */
    public final TableField<CategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(256), this, "描述");

    /**
     * The column <code>ai_qa_system.qa_category.parent_category_id</code>.
     * 父分类ID
     */
    public final TableField<CategoryRecord, Long> PARENT_CATEGORY_ID = createField(DSL.name("parent_category_id"), SQLDataType.BIGINT, this, "父分类ID");

    /**
     * The column <code>ai_qa_system.qa_category.sort_num</code>. 排序号
     */
    public final TableField<CategoryRecord, UInteger> SORT_NUM = createField(DSL.name("sort_num"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "排序号");

    /**
     * The column <code>ai_qa_system.qa_category.create_time</code>. 创建时间
     */
    public final TableField<CategoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>ai_qa_system.qa_category.update_time</code>. 修改时间
     */
    public final TableField<CategoryRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>ai_qa_system.qa_category.creator</code>. 创建者
     */
    public final TableField<CategoryRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    private CategoryTb(Name alias, Table<CategoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CategoryTb(Name alias, Table<CategoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("题目分类表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_category</code> table reference
     */
    public CategoryTb(String alias) {
        this(DSL.name(alias), QA_CATEGORY);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_category</code> table reference
     */
    public CategoryTb(Name alias) {
        this(alias, QA_CATEGORY);
    }

    /**
     * Create a <code>ai_qa_system.qa_category</code> table reference
     */
    public CategoryTb() {
        this(DSL.name("qa_category"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<CategoryRecord, Long> getIdentity() {
        return (Identity<CategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CategoryRecord> getPrimaryKey() {
        return Keys.KEY_QA_CATEGORY_PRIMARY;
    }

    @Override
    public CategoryTb as(String alias) {
        return new CategoryTb(DSL.name(alias), this);
    }

    @Override
    public CategoryTb as(Name alias) {
        return new CategoryTb(alias, this);
    }

    @Override
    public CategoryTb as(Table<?> alias) {
        return new CategoryTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryTb rename(String name) {
        return new CategoryTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryTb rename(Name name) {
        return new CategoryTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryTb rename(Table<?> name) {
        return new CategoryTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryTb where(Condition condition) {
        return new CategoryTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoryTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoryTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
