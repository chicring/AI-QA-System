/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.PermissionTb.SysPermissionPath;
import com.nrapendra.jooq.tables.RoleTb.SysRolePath;
import com.nrapendra.jooq.tables.records.RolePermissionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 角色权限关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePermissionTb extends TableImpl<RolePermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.sys_role_permission</code>
     */
    public static final RolePermissionTb SYS_ROLE_PERMISSION = new RolePermissionTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolePermissionRecord> getRecordType() {
        return RolePermissionRecord.class;
    }

    /**
     * The column <code>ai_qa_system.sys_role_permission.id</code>. 主键ID
     */
    public final TableField<RolePermissionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>ai_qa_system.sys_role_permission.role_id</code>. 角色ID
     */
    public final TableField<RolePermissionRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "角色ID");

    /**
     * The column <code>ai_qa_system.sys_role_permission.permission_id</code>.
     * 权限ID
     */
    public final TableField<RolePermissionRecord, Long> PERMISSION_ID = createField(DSL.name("permission_id"), SQLDataType.BIGINT.nullable(false), this, "权限ID");

    /**
     * The column <code>ai_qa_system.sys_role_permission.create_time</code>.
     * 创建时间
     */
    public final TableField<RolePermissionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    /**
     * The column <code>ai_qa_system.sys_role_permission.update_time</code>.
     * 更新时间
     */
    public final TableField<RolePermissionRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "更新时间");

    /**
     * The column <code>ai_qa_system.sys_role_permission.creator</code>. 创建者
     */
    public final TableField<RolePermissionRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    private RolePermissionTb(Name alias, Table<RolePermissionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RolePermissionTb(Name alias, Table<RolePermissionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("角色权限关联表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_role_permission</code> table
     * reference
     */
    public RolePermissionTb(String alias) {
        this(DSL.name(alias), SYS_ROLE_PERMISSION);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_role_permission</code> table
     * reference
     */
    public RolePermissionTb(Name alias) {
        this(alias, SYS_ROLE_PERMISSION);
    }

    /**
     * Create a <code>ai_qa_system.sys_role_permission</code> table reference
     */
    public RolePermissionTb() {
        this(DSL.name("sys_role_permission"), null);
    }

    public <O extends Record> RolePermissionTb(Table<O> path, ForeignKey<O, RolePermissionRecord> childPath, InverseForeignKey<O, RolePermissionRecord> parentPath) {
        super(path, childPath, parentPath, SYS_ROLE_PERMISSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SysRolePermissionPath extends RolePermissionTb implements Path<RolePermissionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SysRolePermissionPath(Table<O> path, ForeignKey<O, RolePermissionRecord> childPath, InverseForeignKey<O, RolePermissionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SysRolePermissionPath(Name alias, Table<RolePermissionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SysRolePermissionPath as(String alias) {
            return new SysRolePermissionPath(DSL.name(alias), this);
        }

        @Override
        public SysRolePermissionPath as(Name alias) {
            return new SysRolePermissionPath(alias, this);
        }

        @Override
        public SysRolePermissionPath as(Table<?> alias) {
            return new SysRolePermissionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<RolePermissionRecord, Long> getIdentity() {
        return (Identity<RolePermissionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RolePermissionRecord> getPrimaryKey() {
        return Keys.KEY_SYS_ROLE_PERMISSION_PRIMARY;
    }

    @Override
    public List<ForeignKey<RolePermissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SYS_ROLE_PERMISSION_SYS_PERMISSION_FK, Keys.SYS_ROLE_PERMISSION_SYS_ROLE_FK);
    }

    private transient SysPermissionPath _sysPermission;

    /**
     * Get the implicit join path to the
     * <code>ai_qa_system.sys_permission</code> table.
     */
    public SysPermissionPath sysPermission() {
        if (_sysPermission == null)
            _sysPermission = new SysPermissionPath(this, Keys.SYS_ROLE_PERMISSION_SYS_PERMISSION_FK, null);

        return _sysPermission;
    }

    private transient SysRolePath _sysRole;

    /**
     * Get the implicit join path to the <code>ai_qa_system.sys_role</code>
     * table.
     */
    public SysRolePath sysRole() {
        if (_sysRole == null)
            _sysRole = new SysRolePath(this, Keys.SYS_ROLE_PERMISSION_SYS_ROLE_FK, null);

        return _sysRole;
    }

    @Override
    public RolePermissionTb as(String alias) {
        return new RolePermissionTb(DSL.name(alias), this);
    }

    @Override
    public RolePermissionTb as(Name alias) {
        return new RolePermissionTb(alias, this);
    }

    @Override
    public RolePermissionTb as(Table<?> alias) {
        return new RolePermissionTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissionTb rename(String name) {
        return new RolePermissionTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissionTb rename(Name name) {
        return new RolePermissionTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissionTb rename(Table<?> name) {
        return new RolePermissionTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissionTb where(Condition condition) {
        return new RolePermissionTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissionTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissionTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissionTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissionTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissionTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissionTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RolePermissionTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissionTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RolePermissionTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
