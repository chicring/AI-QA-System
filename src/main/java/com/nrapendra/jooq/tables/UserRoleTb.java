/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Indexes;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.UserRoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户角色关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRoleTb extends TableImpl<UserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.sys_user_role</code>
     */
    public static final UserRoleTb SYS_USER_ROLE = new UserRoleTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRoleRecord> getRecordType() {
        return UserRoleRecord.class;
    }

    /**
     * The column <code>ai_qa_system.sys_user_role.id</code>. 主键ID
     */
    public final TableField<UserRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>ai_qa_system.sys_user_role.username</code>. 用户名
     */
    public final TableField<UserRoleRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "用户名");

    /**
     * The column <code>ai_qa_system.sys_user_role.role_id</code>. 角色ID
     */
    public final TableField<UserRoleRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT, this, "角色ID");

    /**
     * The column <code>ai_qa_system.sys_user_role.create_time</code>. 创建时间
     */
    public final TableField<UserRoleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    /**
     * The column <code>ai_qa_system.sys_user_role.update_time</code>. 更新时间
     */
    public final TableField<UserRoleRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "更新时间");

    /**
     * The column <code>ai_qa_system.sys_user_role.creator</code>. 创建者
     */
    public final TableField<UserRoleRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    private UserRoleTb(Name alias, Table<UserRoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserRoleTb(Name alias, Table<UserRoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("用户角色关联表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_user_role</code> table reference
     */
    public UserRoleTb(String alias) {
        this(DSL.name(alias), SYS_USER_ROLE);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_user_role</code> table reference
     */
    public UserRoleTb(Name alias) {
        this(alias, SYS_USER_ROLE);
    }

    /**
     * Create a <code>ai_qa_system.sys_user_role</code> table reference
     */
    public UserRoleTb() {
        this(DSL.name("sys_user_role"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SYS_USER_ROLE_IDX_ROLE_ID, Indexes.SYS_USER_ROLE_IDX_USERNAME);
    }

    @Override
    public Identity<UserRoleRecord, Long> getIdentity() {
        return (Identity<UserRoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRoleRecord> getPrimaryKey() {
        return Keys.KEY_SYS_USER_ROLE_PRIMARY;
    }

    @Override
    public UserRoleTb as(String alias) {
        return new UserRoleTb(DSL.name(alias), this);
    }

    @Override
    public UserRoleTb as(Name alias) {
        return new UserRoleTb(alias, this);
    }

    @Override
    public UserRoleTb as(Table<?> alias) {
        return new UserRoleTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoleTb rename(String name) {
        return new UserRoleTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoleTb rename(Name name) {
        return new UserRoleTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRoleTb rename(Table<?> name) {
        return new UserRoleTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoleTb where(Condition condition) {
        return new UserRoleTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoleTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoleTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoleTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoleTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoleTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoleTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserRoleTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoleTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserRoleTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
