/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Indexes;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.records.QuestionTagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 题目标签关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionTagTb extends TableImpl<QuestionTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.qa_question_tag</code>
     */
    public static final QuestionTagTb QA_QUESTION_TAG = new QuestionTagTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionTagRecord> getRecordType() {
        return QuestionTagRecord.class;
    }

    /**
     * The column <code>ai_qa_system.qa_question_tag.question_tag_id</code>.
     * 主键ID
     */
    public final TableField<QuestionTagRecord, Long> QUESTION_TAG_ID = createField(DSL.name("question_tag_id"), SQLDataType.BIGINT.nullable(false), this, "主键ID");

    /**
     * The column <code>ai_qa_system.qa_question_tag.question_id</code>. 题目ID
     */
    public final TableField<QuestionTagRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "题目ID");

    /**
     * The column <code>ai_qa_system.qa_question_tag.tag_id</code>. 标签ID
     */
    public final TableField<QuestionTagRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "标签ID");

    /**
     * The column <code>ai_qa_system.qa_question_tag.create_time</code>. 创建时间
     */
    public final TableField<QuestionTagRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>ai_qa_system.qa_question_tag.update_time</code>. 修改时间
     */
    public final TableField<QuestionTagRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>ai_qa_system.qa_question_tag.creator</code>. 创建者
     */
    public final TableField<QuestionTagRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    private QuestionTagTb(Name alias, Table<QuestionTagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QuestionTagTb(Name alias, Table<QuestionTagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("题目标签关联表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_question_tag</code> table
     * reference
     */
    public QuestionTagTb(String alias) {
        this(DSL.name(alias), QA_QUESTION_TAG);
    }

    /**
     * Create an aliased <code>ai_qa_system.qa_question_tag</code> table
     * reference
     */
    public QuestionTagTb(Name alias) {
        this(alias, QA_QUESTION_TAG);
    }

    /**
     * Create a <code>ai_qa_system.qa_question_tag</code> table reference
     */
    public QuestionTagTb() {
        this(DSL.name("qa_question_tag"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QA_QUESTION_TAG_IDX_TAG_ID);
    }

    @Override
    public UniqueKey<QuestionTagRecord> getPrimaryKey() {
        return Keys.KEY_QA_QUESTION_TAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<QuestionTagRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_QA_QUESTION_TAG_UK_QUESTION_TAG);
    }

    @Override
    public QuestionTagTb as(String alias) {
        return new QuestionTagTb(DSL.name(alias), this);
    }

    @Override
    public QuestionTagTb as(Name alias) {
        return new QuestionTagTb(alias, this);
    }

    @Override
    public QuestionTagTb as(Table<?> alias) {
        return new QuestionTagTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTagTb rename(String name) {
        return new QuestionTagTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTagTb rename(Name name) {
        return new QuestionTagTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionTagTb rename(Table<?> name) {
        return new QuestionTagTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTagTb where(Condition condition) {
        return new QuestionTagTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTagTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTagTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTagTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTagTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTagTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTagTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuestionTagTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTagTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuestionTagTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
