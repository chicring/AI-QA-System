/*
 * This file is generated by jOOQ.
 */
package com.nrapendra.jooq.tables;


import com.nrapendra.jooq.AiQaSystem;
import com.nrapendra.jooq.Keys;
import com.nrapendra.jooq.tables.RolePermissionTb.SysRolePermissionPath;
import com.nrapendra.jooq.tables.records.RoleRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 角色表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleTb extends TableImpl<RoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ai_qa_system.sys_role</code>
     */
    public static final RoleTb SYS_ROLE = new RoleTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleRecord> getRecordType() {
        return RoleRecord.class;
    }

    /**
     * The column <code>ai_qa_system.sys_role.id</code>. 角色ID
     */
    public final TableField<RoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "角色ID");

    /**
     * The column <code>ai_qa_system.sys_role.name</code>. 角色名称
     */
    public final TableField<RoleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "角色名称");

    /**
     * The column <code>ai_qa_system.sys_role.level</code>. 角色级别：0-9，数字越小级别越高
     */
    public final TableField<RoleRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER, this, "角色级别：0-9，数字越小级别越高");

    /**
     * The column <code>ai_qa_system.sys_role.type</code>. 角色类型：1-内置，2-自定义
     */
    public final TableField<RoleRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "角色类型：1-内置，2-自定义");

    /**
     * The column <code>ai_qa_system.sys_role.remark</code>. 备注
     */
    public final TableField<RoleRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(255), this, "备注");

    /**
     * The column <code>ai_qa_system.sys_role.create_time</code>. 创建时间
     */
    public final TableField<RoleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    /**
     * The column <code>ai_qa_system.sys_role.update_time</code>. 更新时间
     */
    public final TableField<RoleRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "更新时间");

    /**
     * The column <code>ai_qa_system.sys_role.creator</code>. 创建者
     */
    public final TableField<RoleRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(255), this, "创建者");

    private RoleTb(Name alias, Table<RoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RoleTb(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("角色表"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_role</code> table reference
     */
    public RoleTb(String alias) {
        this(DSL.name(alias), SYS_ROLE);
    }

    /**
     * Create an aliased <code>ai_qa_system.sys_role</code> table reference
     */
    public RoleTb(Name alias) {
        this(alias, SYS_ROLE);
    }

    /**
     * Create a <code>ai_qa_system.sys_role</code> table reference
     */
    public RoleTb() {
        this(DSL.name("sys_role"), null);
    }

    public <O extends Record> RoleTb(Table<O> path, ForeignKey<O, RoleRecord> childPath, InverseForeignKey<O, RoleRecord> parentPath) {
        super(path, childPath, parentPath, SYS_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SysRolePath extends RoleTb implements Path<RoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SysRolePath(Table<O> path, ForeignKey<O, RoleRecord> childPath, InverseForeignKey<O, RoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SysRolePath(Name alias, Table<RoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SysRolePath as(String alias) {
            return new SysRolePath(DSL.name(alias), this);
        }

        @Override
        public SysRolePath as(Name alias) {
            return new SysRolePath(alias, this);
        }

        @Override
        public SysRolePath as(Table<?> alias) {
            return new SysRolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AiQaSystem.AI_QA_SYSTEM;
    }

    @Override
    public Identity<RoleRecord, Long> getIdentity() {
        return (Identity<RoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoleRecord> getPrimaryKey() {
        return Keys.KEY_SYS_ROLE_PRIMARY;
    }

    private transient SysRolePermissionPath _sysRolePermission;

    /**
     * Get the implicit to-many join path to the
     * <code>ai_qa_system.sys_role_permission</code> table
     */
    public SysRolePermissionPath sysRolePermission() {
        if (_sysRolePermission == null)
            _sysRolePermission = new SysRolePermissionPath(this, null, Keys.SYS_ROLE_PERMISSION_SYS_ROLE_FK.getInverseKey());

        return _sysRolePermission;
    }

    @Override
    public RoleTb as(String alias) {
        return new RoleTb(DSL.name(alias), this);
    }

    @Override
    public RoleTb as(Name alias) {
        return new RoleTb(alias, this);
    }

    @Override
    public RoleTb as(Table<?> alias) {
        return new RoleTb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTb rename(String name) {
        return new RoleTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTb rename(Name name) {
        return new RoleTb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTb rename(Table<?> name) {
        return new RoleTb(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleTb where(Condition condition) {
        return new RoleTb(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleTb where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleTb where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleTb where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleTb where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleTb where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleTb where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleTb where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleTb whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleTb whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
